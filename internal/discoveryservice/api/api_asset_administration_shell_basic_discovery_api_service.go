// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 *
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell - Part 2: API](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * API version: V3.1.1_SSP-001
 * Contact: info@idtwin.org
 */

package api

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/eclipse-basyx/basyx-go-components/internal/common"
	"github.com/eclipse-basyx/basyx-go-components/internal/common/model"
	persistence_postgresql "github.com/eclipse-basyx/basyx-go-components/internal/discoveryservice/persistence"
)

const (
	componentName = "DISC"
)

// AssetAdministrationShellBasicDiscoveryAPIAPIService is a service that implements the logic for the AssetAdministrationShellBasicDiscoveryAPIAPIServicer
// This service should implement the business logic for every endpoint for the AssetAdministrationShellBasicDiscoveryAPIAPI API.
// Include any external packages or services that will be required by this service.
type AssetAdministrationShellBasicDiscoveryAPIAPIService struct {
	disoveryBackend persistence_postgresql.PostgreSQLDiscoveryDatabase
}

// NewAssetAdministrationShellBasicDiscoveryAPIAPIService creates a default api service
func NewAssetAdministrationShellBasicDiscoveryAPIAPIService(databaseBackend persistence_postgresql.PostgreSQLDiscoveryDatabase) *AssetAdministrationShellBasicDiscoveryAPIAPIService {
	return &AssetAdministrationShellBasicDiscoveryAPIAPIService{
		disoveryBackend: databaseBackend,
	}
}

// GetAllAssetAdministrationShellIdsByAssetLink - Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
// Deprecated
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) GetAllAssetAdministrationShellIdsByAssetLink(ctx context.Context, assetIds []string, limit int32, cursor string) (model.ImplResponse, error) {
	// Not implemented in this service; keep a proper structured error.
	return common.NewErrorResponse(
		errors.New("GetAllAssetAdministrationShellIdsByAssetLink is deprecated and therefore not implemented"),
		http.StatusGone,
		componentName,
		"GetAllAssetAdministrationShellIdsByAssetLink",
		"Deprecated",
	), nil
}

// SearchAllAssetAdministrationShellIdsByAssetLink - Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) SearchAllAssetAdministrationShellIdsByAssetLink(
	ctx context.Context,
	limit int32,
	cursor string,
	assetLink []model.AssetLink,
) (model.ImplResponse, error) {

	// Decode the incoming cursor only if itâ€™s non-empty; empty means "start from the beginning".
	var internalCursor string
	if strings.TrimSpace(cursor) != "" {
		dec, decErr := common.DecodeString(cursor)
		if decErr != nil {
			return common.NewErrorResponse(
				decErr, http.StatusBadRequest, componentName, "SearchAllAssetAdministrationShellIdsByAssetLink", "BadCursor",
			), nil
		}
		internalCursor = dec
	}

	ids, nextCursor, err := s.disoveryBackend.SearchAASIDsByAssetLinks(ctx, assetLink, limit, internalCursor)
	if err != nil {
		return common.NewErrorResponse(
			err, http.StatusInternalServerError, componentName, "SearchAllAssetAdministrationShellIdsByAssetLink", "InternalServerError",
		), err
	}

	// Build paging metadata with omitempty behavior: only set cursor when there's a next page.
	pm := model.PagedResultPagingMetadata{}
	if nextCursor != "" {
		pm.Cursor = common.EncodeString(nextCursor)
	}

	res := model.GetAllAssetAdministrationShellIdsByAssetLink200Response{
		PagingMetadata: pm,
		Result:         ids,
	}
	return model.Response(http.StatusOK, res), nil
}

// GetAllAssetLinksById - Returns a list of specific asset identifiers based on an Asset Administration Shell ID to edit discoverable content.
// The global asset ID is returned as specific asset ID with "name" equal to "globalAssetId" (see Constraint AASd-116).
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) GetAllAssetLinksById(
	ctx context.Context,
	aasIdentifier string,
) (model.ImplResponse, error) {

	decoded, decodeErr := common.DecodeString(aasIdentifier)
	if decodeErr != nil {
		return common.NewErrorResponse(
			decodeErr, http.StatusBadRequest, componentName, "GetAllAssetLinksById", "BadRequest-Decode",
		), nil
	}

	links, err := s.disoveryBackend.GetAllAssetLinks(string(decoded))
	if err != nil {
		switch {
		case common.IsErrNotFound(err):
			return common.NewErrorResponse(
				err, http.StatusNotFound, componentName, "GetAllAssetLinksById", "NotFound",
			), nil
		case common.IsErrBadRequest(err):
			return common.NewErrorResponse(
				err, http.StatusBadRequest, componentName, "GetAllAssetLinksById", "BadRequest",
			), nil
		default:
			return common.NewErrorResponse(
				err, http.StatusInternalServerError, componentName, "GetAllAssetLinksById", "Unhandled",
			), err
		}
	}

	return model.Response(http.StatusOK, links), nil
}

// PostAllAssetLinksById - Creates or replaces all asset links associated to the Asset Administration Shell.
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) PostAllAssetLinksById(
	ctx context.Context,
	aasIdentifier string,
	specificAssetId []model.SpecificAssetId,
) (model.ImplResponse, error) {

	decodeDiscoveryIdentifier, decodeError := common.DecodeString(aasIdentifier)
	if decodeError != nil {
		return common.NewErrorResponse(
			decodeError, http.StatusBadRequest, componentName, "PostAllAssetLinksById", "BadRequest-Decode",
		), nil
	}

	err := s.disoveryBackend.CreateAllAssetLinks(string(decodeDiscoveryIdentifier), specificAssetId)
	if err != nil {
		switch {
		case common.IsErrBadRequest(err):
			return common.NewErrorResponse(
				err, http.StatusBadRequest, componentName, "PostAllAssetLinksById", "BadRequest",
			), nil
		default:
			return common.NewErrorResponse(
				err, http.StatusInternalServerError, componentName, "PostAllAssetLinksById", "Unhandled",
			), err
		}
	}

	return model.Response(http.StatusCreated, specificAssetId), nil
}

// DeleteAllAssetLinksById - Deletes specified specific asset identifiers linked to an Asset Administration Shell:
// discovery via these specific asset IDs shall not be supported any longer
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) DeleteAllAssetLinksById(
	ctx context.Context,
	aasIdentifier string,
) (model.ImplResponse, error) {

	decoded, decodeErr := common.DecodeString(aasIdentifier)
	if decodeErr != nil {
		return common.NewErrorResponse(
			decodeErr, http.StatusBadRequest, componentName, "DeleteAllAssetLinksById", "BadRequest-Decode",
		), nil
	}

	err := s.disoveryBackend.DeleteAllAssetLinks(string(decoded))
	if err != nil {
		switch {
		case common.IsErrNotFound(err):
			return common.NewErrorResponse(
				err, http.StatusNotFound, componentName, "DeleteAllAssetLinksById", "NotFound",
			), nil
		default:
			return common.NewErrorResponse(
				err, http.StatusInternalServerError, componentName, "DeleteAllAssetLinksById", "InternalServerError",
			), err
		}
	}

	return model.Response(http.StatusNoContent, nil), nil
}
