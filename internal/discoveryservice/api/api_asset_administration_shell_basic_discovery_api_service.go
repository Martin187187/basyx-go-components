// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 *
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell - Part 2: API](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * API version: V3.1.1_SSP-001
 * Contact: info@idtwin.org
 */

package api

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/eclipse-basyx/basyx-go-components/internal/common"
	"github.com/eclipse-basyx/basyx-go-components/internal/common/model"
	persistence_postgresql "github.com/eclipse-basyx/basyx-go-components/internal/discoveryservice/persistence"
)

// AssetAdministrationShellBasicDiscoveryAPIAPIService is a service that implements the logic for the AssetAdministrationShellBasicDiscoveryAPIAPIServicer
// This service should implement the business logic for every endpoint for the AssetAdministrationShellBasicDiscoveryAPIAPI API.
// Include any external packages or services that will be required by this service.
type AssetAdministrationShellBasicDiscoveryAPIAPIService struct {
	disoveryBackend persistence_postgresql.PostgreSQLDiscoveryDatabase
}

// NewAssetAdministrationShellBasicDiscoveryAPIAPIService creates a default api service
func NewAssetAdministrationShellBasicDiscoveryAPIAPIService(databaseBackend persistence_postgresql.PostgreSQLDiscoveryDatabase) *AssetAdministrationShellBasicDiscoveryAPIAPIService {
	return &AssetAdministrationShellBasicDiscoveryAPIAPIService{
		disoveryBackend: databaseBackend,
	}
}

// GetAllAssetAdministrationShellIdsByAssetLink - Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
// Deprecated
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) GetAllAssetAdministrationShellIdsByAssetLink(ctx context.Context, assetIds []string, limit int32, cursor string) (model.ImplResponse, error) {
	// TODO - update GetAllAssetAdministrationShellIdsByAssetLink with the required logic for this service method.
	// Add api_asset_administration_shell_basic_discovery_api_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return model.Respone model.Respone(200, GetAllAssetAdministrationShellIdsByAssetLink200Response{}) or use other options such as http.Ok ...
	// return model.Respone(200, GetAllAssetAdministrationShellIdsByAssetLink200Response{}), nil

	// TODO: Uncomment the next line to return model.Respone model.Respone(0, Result{}) or use other options such as http.Ok ...
	// return model.Response(0, Result{}), nil

	return model.Response(http.StatusNotImplemented, nil), errors.New("GetAllAssetAdministrationShellIdsByAssetLink method not implemented")
}

// SearchAllAssetAdministrationShellIdsByAssetLink - Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) SearchAllAssetAdministrationShellIdsByAssetLink(
	ctx context.Context,
	limit int32,
	cursor string,
	assetLink []model.AssetLink,
) (model.ImplResponse, error) {

	timestamp := common.GetCurrentTimestamp()

	// Decode the incoming cursor only if itâ€™s non-empty; empty means "start from the beginning".
	var internalCursor string
	if strings.TrimSpace(cursor) != "" {
		dec, decErr := common.DecodeString(cursor)
		if decErr != nil {
			return model.Response(http.StatusBadRequest,
				[]common.ErrorHandler{*common.NewErrorHandler(
					"Error",
					decErr,
					"400",
					"DISC-SearchAll-400-BadCursor",
					string(timestamp),
				)}), nil
		}
		internalCursor = dec
	}

	ids, nextCursor, err := s.disoveryBackend.SearchAASIDsByAssetLinks(ctx, assetLink, limit, internalCursor)
	if err != nil {
		return model.Response(http.StatusInternalServerError,
			[]common.ErrorHandler{*common.NewErrorHandler(
				"Error",
				err,
				"500",
				"DISC-SearchAll-500-InternalServerError",
				string(timestamp),
			)}), nil
	}

	// Build paging metadata with omitempty behavior: only set cursor when there's a next page.
	pm := model.PagedResultPagingMetadata{}
	if nextCursor != "" {
		pm.Cursor = common.EncodeString(nextCursor)
	}

	res := model.GetAllAssetAdministrationShellIdsByAssetLink200Response{
		PagingMetadata: pm,
		Result:         ids,
	}
	return model.Response(http.StatusOK, res), nil
}

// GetAllAssetLinksById - Returns a list of specific asset identifiers based on an Asset Administration Shell ID to edit discoverable content. The global asset ID is returned as specific asset ID with \&quot;name\&quot; equal to \&quot;globalAssetId\&quot; (see Constraint AASd-116).
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) GetAllAssetLinksById(
	ctx context.Context,
	aasIdentifier string,
) (model.ImplResponse, error) {

	timestamp := common.GetCurrentTimestamp()

	decoded, decodeErr := common.DecodeString(aasIdentifier)
	if decodeErr != nil {
		return model.Response(http.StatusBadRequest, []common.ErrorHandler{
			*common.NewErrorHandler("Error", decodeErr, "400", "DISC-GetAllAssetLinksById-400-BadRequest-Decode", string(timestamp)),
		}), nil
	}

	links, err := s.disoveryBackend.GetAllAssetLinks(string(decoded))
	if err != nil {
		switch {
		case common.IsErrNotFound(err):

			return model.Response(http.StatusNotFound, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "404", "DISC-GetAllAssetLinksById-404-NotFound", string(timestamp)),
			}), nil

		case common.IsErrBadRequest(err):
			return model.Response(http.StatusBadRequest, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "400", "DISC-GetAllAssetLinksById-400-BadRequest", string(timestamp)),
			}), nil

		case common.IsInternalServerError(err):
			return model.Response(http.StatusInternalServerError, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "500", "DISC-GetAllAssetLinksById-500-InternalServerError", string(timestamp)),
			}), nil

		case common.IsErrConflict(err):
			return model.Response(http.StatusConflict, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "409", "DISC-GetAllAssetLinksById-409-Conflict", string(timestamp)),
			}), nil

		default:
			return model.Response(http.StatusInternalServerError, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "500", "DISC-GetAllAssetLinksById-500-Unhandled", string(timestamp)),
			}), err
		}
	}

	return model.Response(http.StatusOK, links), nil
}

// PostAllAssetLinksById - Creates or replaces all asset links associated to the Asset Administration Shell.
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) PostAllAssetLinksById(
	ctx context.Context,
	aasIdentifier string,
	specificAssetId []model.SpecificAssetId,
) (model.ImplResponse, error) {

	decodeDiscoveryIdentifier, decodeError := common.DecodeString(aasIdentifier)
	timestamp := common.GetCurrentTimestamp()
	if decodeError != nil {
		return model.Response(
			http.StatusBadRequest,
			[]common.ErrorHandler{
				*common.NewErrorHandler("Error", decodeError, "400",
					"DISC-PostAllAssetLinksById-400-BadRequest-Decode", string(timestamp)),
			},
		), nil
	}

	err := s.disoveryBackend.CreateAllAssetLinks(string(decodeDiscoveryIdentifier), specificAssetId)
	if err != nil {
		switch {
		case common.IsErrBadRequest(err):
			return model.Response(
				http.StatusBadRequest,
				[]common.ErrorHandler{
					*common.NewErrorHandler("Error", err, "400",
						"DISC-PostAllAssetLinksById-400-BadRequest", string(timestamp)),
				},
			), nil

		case common.IsInternalServerError(err):
			return model.Response(
				http.StatusInternalServerError,
				[]common.ErrorHandler{
					*common.NewErrorHandler("Error", err, "500",
						"DISC-PostAllAssetLinksById-500-InternalServerError", string(timestamp)),
				},
			), nil

		default:
			return model.Response(http.StatusInternalServerError, nil), nil
		}
	}

	return model.Response(http.StatusCreated, specificAssetId), nil
}

// DeleteAllAssetLinksById - Deletes specified specific asset identifiers linked to an Asset Administration Shell: discovery via these specific asset IDs shall not be supported any longer
func (s *AssetAdministrationShellBasicDiscoveryAPIAPIService) DeleteAllAssetLinksById(
	ctx context.Context,
	aasIdentifier string,
) (model.ImplResponse, error) {

	timestamp := common.GetCurrentTimestamp()

	decoded, decodeErr := common.DecodeString(aasIdentifier)
	if decodeErr != nil {
		return model.Response(http.StatusBadRequest, []common.ErrorHandler{
			*common.NewErrorHandler("Error", decodeErr, "400", "DISC-DeleteAllAssetLinksById-400-BadRequest-Decode", string(timestamp)),
		}), nil
	}

	err := s.disoveryBackend.DeleteAllAssetLinks(string(decoded))
	if err != nil {
		switch {
		case common.IsErrNotFound(err):
			return model.Response(http.StatusNotFound, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "404", "DISC-DeleteAllAssetLinksById-404-NotFound", string(timestamp)),
			}), nil

		default:
			return model.Response(http.StatusInternalServerError, []common.ErrorHandler{
				*common.NewErrorHandler("Error", err, "500", "DISC-DeleteAllAssetLinksById-500-InternalServerError", string(timestamp)),
			}), nil
		}
	}

	return model.Response(http.StatusNoContent, nil), nil
}
