// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 *
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/eclipse-basyx/basyx-go-components/internal/common"
	"github.com/eclipse-basyx/basyx-go-components/internal/common/model"
	"github.com/go-chi/chi/v5"
)

const (
	componentName = "DISC_VAL"
)

// AssetAdministrationShellBasicDiscoveryAPIAPIController binds http requests to an api service and writes the service results to the http response
type AssetAdministrationShellBasicDiscoveryAPIAPIController struct {
	service      AssetAdministrationShellBasicDiscoveryAPIAPIServicer
	errorHandler model.ErrorHandler
}

// AssetAdministrationShellBasicDiscoveryAPIAPIOption for how the controller is set up.
type AssetAdministrationShellBasicDiscoveryAPIAPIOption func(*AssetAdministrationShellBasicDiscoveryAPIAPIController)

// WithAssetAdministrationShellBasicDiscoveryAPIAPIErrorHandler inject ErrorHandler into controller
func WithAssetAdministrationShellBasicDiscoveryAPIAPIErrorHandler(h model.ErrorHandler) AssetAdministrationShellBasicDiscoveryAPIAPIOption {
	return func(c *AssetAdministrationShellBasicDiscoveryAPIAPIController) {
		c.errorHandler = h
	}
}

// NewAssetAdministrationShellBasicDiscoveryAPIAPIController creates a default api controller
func NewAssetAdministrationShellBasicDiscoveryAPIAPIController(s AssetAdministrationShellBasicDiscoveryAPIAPIServicer, opts ...AssetAdministrationShellBasicDiscoveryAPIAPIOption) *AssetAdministrationShellBasicDiscoveryAPIAPIController {
	controller := &AssetAdministrationShellBasicDiscoveryAPIAPIController{
		service:      s,
		errorHandler: model.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AssetAdministrationShellBasicDiscoveryAPIAPIController
func (c *AssetAdministrationShellBasicDiscoveryAPIAPIController) Routes() Routes {
	return Routes{
		"GetAllAssetAdministrationShellIdsByAssetLink": Route{
			strings.ToUpper("Get"),
			"/lookup/shells",
			c.GetAllAssetAdministrationShellIdsByAssetLink,
		},
		"SearchAllAssetAdministrationShellIdsByAssetLink": Route{
			strings.ToUpper("Post"),
			"/lookup/shellsByAssetLink",
			c.SearchAllAssetAdministrationShellIdsByAssetLink,
		},
		"GetAllAssetLinksById": Route{
			strings.ToUpper("Get"),
			"/lookup/shells/{aasIdentifier}",
			c.GetAllAssetLinksById,
		},
		"PostAllAssetLinksById": Route{
			strings.ToUpper("Post"),
			"/lookup/shells/{aasIdentifier}",
			c.PostAllAssetLinksById,
		},
		"DeleteAllAssetLinksById": Route{
			strings.ToUpper("Delete"),
			"/lookup/shells/{aasIdentifier}",
			c.DeleteAllAssetLinksById,
		},
	}
}

// GetAllAssetAdministrationShellIdsByAssetLink - Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
func (c *AssetAdministrationShellBasicDiscoveryAPIAPIController) GetAllAssetAdministrationShellIdsByAssetLink(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Invalid query parameters"),
			http.StatusBadRequest,
			componentName,
			"GetAllAssetAdministrationShellIdsByAssetLink",
			"query",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	var assetIdsParam []string
	if query.Has("assetIds") {
		assetIdsParam = strings.Split(query.Get("assetIds"), ",")
	}

	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
		)
		if err != nil {
			result := common.NewErrorResponse(
				common.NewErrBadRequest("Invalid 'limit' parameter"),
				http.StatusBadRequest,
				componentName,
				"GetAllAssetAdministrationShellIdsByAssetLink",
				"limit",
			)
			EncodeJSONResponse(result.Body, &result.Code, w)
			return
		}
		limitParam = param
	}

	var cursorParam string
	if query.Has("cursor") {
		cursorParam = query.Get("cursor")
	}

	result, err := c.service.GetAllAssetAdministrationShellIdsByAssetLink(r.Context(), assetIdsParam, limitParam, cursorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchAllAssetAdministrationShellIdsByAssetLink - Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
func (c *AssetAdministrationShellBasicDiscoveryAPIAPIController) SearchAllAssetAdministrationShellIdsByAssetLink(w http.ResponseWriter, r *http.Request) {
	// parse query (limit, cursor)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Invalid query parameters"),
			http.StatusBadRequest,
			componentName,
			"SearchAllAssetAdministrationShellIdsByAssetLink",
			"query",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
		)
		if err != nil {
			result := common.NewErrorResponse(
				common.NewErrBadRequest("Invalid 'limit' parameter"),
				http.StatusBadRequest,
				componentName,
				"SearchAllAssetAdministrationShellIdsByAssetLink",
				"limit",
			)
			EncodeJSONResponse(result.Body, &result.Code, w)
			return
		}
		limitParam = param
	}

	var cursorParam string
	if query.Has("cursor") {
		cursorParam = query.Get("cursor")
	}

	// Body: []AssetLink
	var assetLinksParam []model.AssetLink
	dec := json.NewDecoder(r.Body)
	dec.DisallowUnknownFields()
	if err := dec.Decode(&assetLinksParam); err != nil {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Incorrect RequestBody"),
			http.StatusBadRequest,
			componentName,
			"SearchAllAssetAdministrationShellIdsByAssetLink",
			"RequestBody",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	// Validate each element
	for _, al := range assetLinksParam {
		if err := model.AssertAssetLinkRequired(al); err != nil {
			result := common.NewErrorResponse(
				common.NewErrBadRequest("Invalid asset link element"),
				http.StatusBadRequest,
				componentName,
				"SearchAllAssetAdministrationShellIdsByAssetLink",
				"assetLinks",
			)
			EncodeJSONResponse(result.Body, &result.Code, w)
			return
		}
	}

	// Service call
	result, err := c.service.SearchAllAssetAdministrationShellIdsByAssetLink(
		r.Context(),
		limitParam,
		cursorParam,
		assetLinksParam,
	)
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllAssetLinksById - Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
func (c *AssetAdministrationShellBasicDiscoveryAPIAPIController) GetAllAssetLinksById(w http.ResponseWriter, r *http.Request) {
	aasIdentifierParam := chi.URLParam(r, "aasIdentifier")
	if aasIdentifierParam == "" {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Missing path parameter 'aasIdentifier'"),
			http.StatusBadRequest,
			componentName,
			"GetAllAssetLinksById",
			"aasIdentifier",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	result, err := c.service.GetAllAssetLinksById(r.Context(), aasIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostAllAssetLinksById - Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
func (c *AssetAdministrationShellBasicDiscoveryAPIAPIController) PostAllAssetLinksById(w http.ResponseWriter, r *http.Request) {
	aasIdentifierParam := chi.URLParam(r, "aasIdentifier")
	if aasIdentifierParam == "" {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Missing path parameter 'aasIdentifier'"),
			http.StatusBadRequest,
			componentName,
			"PostAllAssetLinksById",
			"aasIdentifier",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	var specificAssetIdParam []model.SpecificAssetId
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&specificAssetIdParam); err != nil {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Incorrect RequestBody"),
			http.StatusBadRequest,
			componentName,
			"PostAllAssetLinksById",
			"RequestBody",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	for _, el := range specificAssetIdParam {
		if err := model.AssertSpecificAssetIdRequired(el); err != nil {
			result := common.NewErrorResponse(
				common.NewErrBadRequest("Invalid SpecificAssetId element"),
				http.StatusBadRequest,
				componentName,
				"PostAllAssetLinksById",
				"specificAssetIds",
			)
			EncodeJSONResponse(result.Body, &result.Code, w)
			return
		}
	}

	result, err := c.service.PostAllAssetLinksById(r.Context(), aasIdentifierParam, specificAssetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAllAssetLinksById - Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
func (c *AssetAdministrationShellBasicDiscoveryAPIAPIController) DeleteAllAssetLinksById(w http.ResponseWriter, r *http.Request) {
	aasIdentifierParam := chi.URLParam(r, "aasIdentifier")
	if aasIdentifierParam == "" {
		result := common.NewErrorResponse(
			common.NewErrBadRequest("Missing path parameter 'aasIdentifier'"),
			http.StatusBadRequest,
			componentName,
			"DeleteAllAssetLinksById",
			"aasIdentifier",
		)
		EncodeJSONResponse(result.Body, &result.Code, w)
		return
	}

	result, err := c.service.DeleteAllAssetLinksById(r.Context(), aasIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
