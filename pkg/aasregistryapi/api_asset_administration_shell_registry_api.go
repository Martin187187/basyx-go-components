// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Registry Service Specification
 *
 * The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * API version: V3.1.1_SSP-001
 * Contact: info@idtwin.org
 */

package apis

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/eclipse-basyx/basyx-go-components/internal/common/model"
	"github.com/gorilla/mux"
)

// AssetAdministrationShellRegistryAPIAPIController binds http requests to an api service and writes the service results to the http response
type AssetAdministrationShellRegistryAPIAPIController struct {
	service      AssetAdministrationShellRegistryAPIAPIServicer
	errorHandler model.ErrorHandler
	contextPath  string
}

// AssetAdministrationShellRegistryAPIAPIOption for how the controller is set up.
type AssetAdministrationShellRegistryAPIAPIOption func(*AssetAdministrationShellRegistryAPIAPIController)

// WithAssetAdministrationShellRegistryAPIAPIErrorHandler inject ErrorHandler into controller
func WithAssetAdministrationShellRegistryAPIAPIErrorHandler(h model.ErrorHandler) AssetAdministrationShellRegistryAPIAPIOption {
	return func(c *AssetAdministrationShellRegistryAPIAPIController) {
		c.errorHandler = h
	}
}

// NewAssetAdministrationShellRegistryAPIAPIController creates a default api controller
func NewAssetAdministrationShellRegistryAPIAPIController(s AssetAdministrationShellRegistryAPIAPIServicer, contextPath string, opts ...AssetAdministrationShellRegistryAPIAPIOption) *AssetAdministrationShellRegistryAPIAPIController {
	controller := &AssetAdministrationShellRegistryAPIAPIController{
		service:      s,
		errorHandler: model.DefaultErrorHandler,
		contextPath:  contextPath,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AssetAdministrationShellRegistryAPIAPIController
func (c *AssetAdministrationShellRegistryAPIAPIController) Routes() Routes {
	return Routes{
		"GetAllAssetAdministrationShellDescriptors": Route{
			"GetAllAssetAdministrationShellDescriptors",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors",
			c.GetAllAssetAdministrationShellDescriptors,
		},
		"PostAssetAdministrationShellDescriptor": Route{
			"PostAssetAdministrationShellDescriptor",
			strings.ToUpper("Post"),
			"/api/v3/shell-descriptors",
			c.PostAssetAdministrationShellDescriptor,
		},
		"GetAssetAdministrationShellDescriptorById": Route{
			"GetAssetAdministrationShellDescriptorById",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors/{aasIdentifier}",
			c.GetAssetAdministrationShellDescriptorById,
		},
		"PutAssetAdministrationShellDescriptorById": Route{
			"PutAssetAdministrationShellDescriptorById",
			strings.ToUpper("Put"),
			"/api/v3/shell-descriptors/{aasIdentifier}",
			c.PutAssetAdministrationShellDescriptorById,
		},
		"DeleteAssetAdministrationShellDescriptorById": Route{
			"DeleteAssetAdministrationShellDescriptorById",
			strings.ToUpper("Delete"),
			"/api/v3/shell-descriptors/{aasIdentifier}",
			c.DeleteAssetAdministrationShellDescriptorById,
		},
		"GetAllSubmodelDescriptorsThroughSuperpath": Route{
			"GetAllSubmodelDescriptorsThroughSuperpath",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors",
			c.GetAllSubmodelDescriptorsThroughSuperpath,
		},
		"PostSubmodelDescriptorThroughSuperpath": Route{
			"PostSubmodelDescriptorThroughSuperpath",
			strings.ToUpper("Post"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors",
			c.PostSubmodelDescriptorThroughSuperpath,
		},
		"GetSubmodelDescriptorByIdThroughSuperpath": Route{
			"GetSubmodelDescriptorByIdThroughSuperpath",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
			c.GetSubmodelDescriptorByIdThroughSuperpath,
		},
		"PutSubmodelDescriptorByIdThroughSuperpath": Route{
			"PutSubmodelDescriptorByIdThroughSuperpath",
			strings.ToUpper("Put"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
			c.PutSubmodelDescriptorByIdThroughSuperpath,
		},
		"DeleteSubmodelDescriptorByIdThroughSuperpath": Route{
			"DeleteSubmodelDescriptorByIdThroughSuperpath",
			strings.ToUpper("Delete"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
			c.DeleteSubmodelDescriptorByIdThroughSuperpath,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the AssetAdministrationShellRegistryAPIAPIController
func (c *AssetAdministrationShellRegistryAPIAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"GetAllAssetAdministrationShellDescriptors",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors",
			c.GetAllAssetAdministrationShellDescriptors,
		},
		Route{
			"PostAssetAdministrationShellDescriptor",
			strings.ToUpper("Post"),
			"/api/v3/shell-descriptors",
			c.PostAssetAdministrationShellDescriptor,
		},
		Route{
			"GetAssetAdministrationShellDescriptorById",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors/{aasIdentifier}",
			c.GetAssetAdministrationShellDescriptorById,
		},
		Route{
			"PutAssetAdministrationShellDescriptorById",
			strings.ToUpper("Put"),
			"/api/v3/shell-descriptors/{aasIdentifier}",
			c.PutAssetAdministrationShellDescriptorById,
		},
		Route{
			"DeleteAssetAdministrationShellDescriptorById",
			strings.ToUpper("Delete"),
			"/api/v3/shell-descriptors/{aasIdentifier}",
			c.DeleteAssetAdministrationShellDescriptorById,
		},
		Route{
			"GetAllSubmodelDescriptorsThroughSuperpath",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors",
			c.GetAllSubmodelDescriptorsThroughSuperpath,
		},
		Route{
			"PostSubmodelDescriptorThroughSuperpath",
			strings.ToUpper("Post"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors",
			c.PostSubmodelDescriptorThroughSuperpath,
		},
		Route{
			"GetSubmodelDescriptorByIdThroughSuperpath",
			strings.ToUpper("Get"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
			c.GetSubmodelDescriptorByIdThroughSuperpath,
		},
		Route{
			"PutSubmodelDescriptorByIdThroughSuperpath",
			strings.ToUpper("Put"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
			c.PutSubmodelDescriptorByIdThroughSuperpath,
		},
		Route{
			"DeleteSubmodelDescriptorByIdThroughSuperpath",
			strings.ToUpper("Delete"),
			"/api/v3/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
			c.DeleteSubmodelDescriptorByIdThroughSuperpath,
		},
	}
}

// GetAllAssetAdministrationShellDescriptors - Returns all Asset Administration Shell Descriptors
func (c *AssetAdministrationShellRegistryAPIAPIController) GetAllAssetAdministrationShellDescriptors(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &model.ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
		)
		if err != nil {
			c.errorHandler(w, r, &model.ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var cursorParam string
	if query.Has("cursor") {
		param := query.Get("cursor")

		cursorParam = param
	} else {
	}
	var assetKindParam model.AssetKind
	if query.Has("assetKind") {
		param := model.AssetKind(query.Get("assetKind"))

		assetKindParam = param
	} else {
	}
	var assetTypeParam string
	if query.Has("assetType") {
		param := query.Get("assetType")

		assetTypeParam = param
	} else {
	}
	result, err := c.service.GetAllAssetAdministrationShellDescriptors(r.Context(), limitParam, cursorParam, assetKindParam, assetTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostAssetAdministrationShellDescriptor - Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
func (c *AssetAdministrationShellRegistryAPIAPIController) PostAssetAdministrationShellDescriptor(w http.ResponseWriter, r *http.Request) {
	var assetAdministrationShellDescriptorParam model.AssetAdministrationShellDescriptor
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&assetAdministrationShellDescriptorParam); err != nil {
		c.errorHandler(w, r, &model.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertAssetAdministrationShellDescriptorRequired(assetAdministrationShellDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := model.AssertAssetAdministrationShellDescriptorConstraints(assetAdministrationShellDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostAssetAdministrationShellDescriptor(r.Context(), assetAdministrationShellDescriptorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAssetAdministrationShellDescriptorById - Returns a specific Asset Administration Shell Descriptor
func (c *AssetAdministrationShellRegistryAPIAPIController) GetAssetAdministrationShellDescriptorById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	result, err := c.service.GetAssetAdministrationShellDescriptorById(r.Context(), aasIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutAssetAdministrationShellDescriptorById - Creates or updates an existing Asset Administration Shell Descriptor
func (c *AssetAdministrationShellRegistryAPIAPIController) PutAssetAdministrationShellDescriptorById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	var assetAdministrationShellDescriptorParam model.AssetAdministrationShellDescriptor
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&assetAdministrationShellDescriptorParam); err != nil {
		c.errorHandler(w, r, &model.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertAssetAdministrationShellDescriptorRequired(assetAdministrationShellDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := model.AssertAssetAdministrationShellDescriptorConstraints(assetAdministrationShellDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutAssetAdministrationShellDescriptorById(r.Context(), aasIdentifierParam, assetAdministrationShellDescriptorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAssetAdministrationShellDescriptorById - Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
func (c *AssetAdministrationShellRegistryAPIAPIController) DeleteAssetAdministrationShellDescriptorById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	result, err := c.service.DeleteAssetAdministrationShellDescriptorById(r.Context(), aasIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllSubmodelDescriptorsThroughSuperpath - Returns all Submodel Descriptors
func (c *AssetAdministrationShellRegistryAPIAPIController) GetAllSubmodelDescriptorsThroughSuperpath(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &model.ParsingError{Err: err}, nil)
		return
	}
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
		)
		if err != nil {
			c.errorHandler(w, r, &model.ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var cursorParam string
	if query.Has("cursor") {
		param := query.Get("cursor")

		cursorParam = param
	} else {
	}
	result, err := c.service.GetAllSubmodelDescriptorsThroughSuperpath(r.Context(), aasIdentifierParam, limitParam, cursorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostSubmodelDescriptorThroughSuperpath - Creates a new Submodel Descriptor, i.e. registers a submodel
func (c *AssetAdministrationShellRegistryAPIAPIController) PostSubmodelDescriptorThroughSuperpath(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	var submodelDescriptorParam model.SubmodelDescriptor
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&submodelDescriptorParam); err != nil {
		c.errorHandler(w, r, &model.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertSubmodelDescriptorRequired(submodelDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := model.AssertSubmodelDescriptorConstraints(submodelDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostSubmodelDescriptorThroughSuperpath(r.Context(), aasIdentifierParam, submodelDescriptorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubmodelDescriptorByIdThroughSuperpath - Returns a specific Submodel Descriptor
func (c *AssetAdministrationShellRegistryAPIAPIController) GetSubmodelDescriptorByIdThroughSuperpath(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	submodelIdentifierParam := params["submodelIdentifier"]
	if submodelIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "submodelIdentifier"}, nil)
		return
	}
	result, err := c.service.GetSubmodelDescriptorByIdThroughSuperpath(r.Context(), aasIdentifierParam, submodelIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutSubmodelDescriptorByIdThroughSuperpath - Creates or updates an existing Submodel Descriptor
func (c *AssetAdministrationShellRegistryAPIAPIController) PutSubmodelDescriptorByIdThroughSuperpath(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	submodelIdentifierParam := params["submodelIdentifier"]
	if submodelIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "submodelIdentifier"}, nil)
		return
	}
	var submodelDescriptorParam model.SubmodelDescriptor
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&submodelDescriptorParam); err != nil {
		c.errorHandler(w, r, &model.ParsingError{Err: err}, nil)
		return
	}
	if err := model.AssertSubmodelDescriptorRequired(submodelDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := model.AssertSubmodelDescriptorConstraints(submodelDescriptorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutSubmodelDescriptorByIdThroughSuperpath(r.Context(), aasIdentifierParam, submodelIdentifierParam, submodelDescriptorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteSubmodelDescriptorByIdThroughSuperpath - Deletes a Submodel Descriptor, i.e. de-registers a submodel
func (c *AssetAdministrationShellRegistryAPIAPIController) DeleteSubmodelDescriptorByIdThroughSuperpath(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aasIdentifierParam := params["aasIdentifier"]
	if aasIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "aasIdentifier"}, nil)
		return
	}
	submodelIdentifierParam := params["submodelIdentifier"]
	if submodelIdentifierParam == "" {
		c.errorHandler(w, r, &model.RequiredError{Field: "submodelIdentifier"}, nil)
		return
	}
	result, err := c.service.DeleteSubmodelDescriptorByIdThroughSuperpath(r.Context(), aasIdentifierParam, submodelIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
